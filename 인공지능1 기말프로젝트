{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyP/M1U6jSlitGgpDLPzlIf/",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/mhs1221/project/blob/main/%EC%9D%B8%EA%B3%B5%EC%A7%80%EB%8A%A51%20%EA%B8%B0%EB%A7%90%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "t_ftPeiM1DhZ",
        "outputId": "03293e27-1648-4b44-de61-843ec46b8475"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ],
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data_dir = '/content/drive/MyDrive/인공지능1/garbage_classification'"
      ],
      "metadata": {
        "id": "O5MSQa6UvGuL"
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "\n",
        "for cls in os.listdir(data_dir):\n",
        "    print(f'{cls} 폴더 내 이미지 개수:', len(os.listdir(os.path.join(data_dir, cls))))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tVLVxpO4v86g",
        "outputId": "10b4fb91-6c53-4b4b-82d2-03048ddaf81f"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "white-glass 폴더 내 이미지 개수: 775\n",
            "plastic 폴더 내 이미지 개수: 865\n",
            "brown-glass 폴더 내 이미지 개수: 607\n",
            "trash 폴더 내 이미지 개수: 697\n",
            "shoes 폴더 내 이미지 개수: 1987\n",
            "cardboard 폴더 내 이미지 개수: 891\n",
            "paper 폴더 내 이미지 개수: 1050\n",
            "clothes 폴더 내 이미지 개수: 5325\n",
            "green-glass 폴더 내 이미지 개수: 629\n",
            "metal 폴더 내 이미지 개수: 769\n",
            "biological 폴더 내 이미지 개수: 985\n",
            "battery 폴더 내 이미지 개수: 945\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import torch\n",
        "from torchvision import datasets, transforms\n",
        "from torch.utils.data import DataLoader\n",
        "import os\n",
        "\n",
        "# 데이터 경로 설정\n",
        "data_dir = '/content/drive/MyDrive/인공지능1/garbage_classification'\n",
        "\n",
        "# 이미지 전처리\n",
        "transform = transforms.Compose([\n",
        "    transforms.Resize((128, 128)),          # 이미지 크기 통일\n",
        "    transforms.ToTensor(),                  # 텐서로 변환\n",
        "    transforms.Normalize((0.5, 0.5, 0.5),   # 정규화 (이미지 3채널)\n",
        "                         (0.5, 0.5, 0.5))\n",
        "])\n",
        "\n",
        "# 학습/검증 데이터셋 나누기\n",
        "dataset = datasets.ImageFolder(root=data_dir, transform=transform)\n",
        "train_size = int(0.8 * len(dataset))\n",
        "val_size = len(dataset) - train_size\n",
        "\n",
        "train_dataset, val_dataset = torch.utils.data.random_split(dataset, [train_size, val_size])\n",
        "\n",
        "# 데이터 확인\n",
        "print(\"클래스 목록:\", dataset.classes)\n",
        "print(\"학습 데이터 개수:\", len(train_dataset))\n",
        "print(\"검증 데이터 개수:\", len(val_dataset))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Qbe-igISwTuP",
        "outputId": "19dc76f0-72c1-414b-addd-9334b56f5fbd"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "클래스 목록: ['battery', 'biological', 'brown-glass', 'cardboard', 'clothes', 'green-glass', 'metal', 'paper', 'plastic', 'shoes', 'trash', 'white-glass']\n",
            "학습 데이터 개수: 12420\n",
            "검증 데이터 개수: 3105\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 데이터로더 설정\n",
        "batch_size = 32  # 한 번에 넣을 이미지 수\n",
        "\n",
        "train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)\n",
        "val_loader = DataLoader(val_dataset, batch_size=batch_size, shuffle=False)\n",
        "\n",
        "# 예시로 하나의 배치 출력\n",
        "images, labels = next(iter(train_loader))\n",
        "print(f'배치 이미지 크기: {images.shape}')\n",
        "print(f'배치 라벨: {labels}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "M1ghG6-_wtqF",
        "outputId": "e60df3e8-7a33-4263-b58c-da5d8ad21252"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "배치 이미지 크기: torch.Size([32, 3, 128, 128])\n",
            "배치 라벨: tensor([ 0,  1,  9,  9,  4,  9,  9,  0,  9,  4,  5,  4,  4, 11,  3,  4,  4,  1,\n",
            "         3,  4,  1,  0, 11,  0,  4,  0,  6,  4,  9,  9,  9,  1])\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import torch.nn as nn\n",
        "import torch.nn.functional as F\n",
        "\n",
        "class SimpleCNN(nn.Module):\n",
        "    def __init__(self, num_classes):\n",
        "        super(SimpleCNN, self).__init__()\n",
        "\n",
        "        self.conv1 = nn.Conv2d(3, 32, kernel_size=3, padding=1)  # 입력 채널 3 (RGB), 출력 채널 32\n",
        "        self.pool = nn.MaxPool2d(2, 2)  # 2x2 맥스풀링\n",
        "        self.conv2 = nn.Conv2d(32, 64, kernel_size=3, padding=1)\n",
        "\n",
        "        self.fc1 = nn.Linear(64 * 56 * 56, 128)  # 입력 이미지 크기에 맞게 변경 필요\n",
        "        self.fc2 = nn.Linear(128, num_classes)\n",
        "\n",
        "    def forward(self, x):\n",
        "        x = self.pool(F.relu(self.conv1(x)))  # conv1 + ReLU + maxpool\n",
        "        x = self.pool(F.relu(self.conv2(x)))  # conv2 + ReLU + maxpool\n",
        "        x = x.view(x.size(0), -1)             # Flatten\n",
        "        x = F.relu(self.fc1(x))               # 첫 번째 fully connected\n",
        "        x = self.fc2(x)                       # 두 번째 fully connected (출력층)\n",
        "        return x\n"
      ],
      "metadata": {
        "id": "v7aAEh9ww_S9"
      },
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 클래스 수는 원본 데이터셋에서 가져옴\n",
        "num_classes = len(dataset.classes)\n"
      ],
      "metadata": {
        "id": "P4NUZVpwxnEi"
      },
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#CNN모델 다시 정의\n",
        "import torch.nn as nn\n",
        "\n",
        "class CNN(nn.Module):\n",
        "    def __init__(self, num_classes):\n",
        "        super(CNN, self).__init__()\n",
        "        self.features = nn.Sequential(\n",
        "            nn.Conv2d(3, 32, kernel_size=3, padding=1),  # 입력 채널 3 (RGB)\n",
        "            nn.ReLU(),\n",
        "            nn.MaxPool2d(2),  # 112x112\n",
        "\n",
        "            nn.Conv2d(32, 64, kernel_size=3, padding=1),\n",
        "            nn.ReLU(),\n",
        "            nn.MaxPool2d(2),  # 56x56\n",
        "\n",
        "            nn.Conv2d(64, 128, kernel_size=3, padding=1),\n",
        "            nn.ReLU(),\n",
        "            nn.MaxPool2d(2),  # 28x28\n",
        "        )\n",
        "        self.classifier = nn.Sequential(\n",
        "            nn.Flatten(),\n",
        "            nn.Linear(128 * 28 * 28, 256),\n",
        "            nn.ReLU(),\n",
        "            nn.Dropout(0.3),\n",
        "            nn.Linear(256, num_classes)\n",
        "        )\n",
        "\n",
        "    def forward(self, x):\n",
        "        x = self.features(x)\n",
        "        x = self.classifier(x)\n",
        "        return x\n"
      ],
      "metadata": {
        "id": "nU_fu2eiyS-o"
      },
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
        "num_classes = len(dataset.classes)  # 데이터셋에서 클래스 수 추출\n",
        "model = CNN(num_classes=num_classes).to(device)\n"
      ],
      "metadata": {
        "id": "U8xsxyUFyY95"
      },
      "execution_count": 23,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#CNN모델 다시 정의(2)\n",
        "import torch.nn as nn\n",
        "\n",
        "class CNNModel(nn.Module):\n",
        "    def __init__(self, num_classes):\n",
        "        super(CNNModel, self).__init__()\n",
        "        self.features = nn.Sequential(\n",
        "            nn.Conv2d(3, 32, kernel_size=3, padding=1),\n",
        "            nn.ReLU(),\n",
        "            nn.MaxPool2d(2, 2),\n",
        "\n",
        "            nn.Conv2d(32, 64, kernel_size=3, padding=1),\n",
        "            nn.ReLU(),\n",
        "            nn.MaxPool2d(2, 2),\n",
        "\n",
        "            nn.Conv2d(64, 128, kernel_size=3, padding=1),\n",
        "            nn.ReLU(),\n",
        "            nn.MaxPool2d(2, 2),\n",
        "        )\n",
        "        self.classifier = nn.Sequential(\n",
        "            nn.Flatten(),\n",
        "            nn.Linear(128 * 16 * 16, 256),  # 입력 이미지 크기는 128x128 기준\n",
        "            nn.ReLU(),\n",
        "            nn.Dropout(0.5),\n",
        "            nn.Linear(256, num_classes)\n",
        "        )\n",
        "\n",
        "    def forward(self, x):\n",
        "        x = self.features(x)\n",
        "        x = self.classifier(x)\n",
        "        return x\n",
        "\n",
        "# 클래스 수 정의 (이전에 정의한 데이터셋 사용)\n",
        "num_classes = len(dataset.classes)\n",
        "\n",
        "# 모델 생성\n",
        "model = CNNModel(num_classes).to(device)\n"
      ],
      "metadata": {
        "id": "nzIrralsejj4"
      },
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import torch.optim as optim\n",
        "import torch.nn as nn\n",
        "\n",
        "# 손실 함수와 옵티마이저 정의\n",
        "criterion = nn.CrossEntropyLoss()\n",
        "optimizer = optim.Adam(model.parameters(), lr=0.001)"
      ],
      "metadata": {
        "id": "rYYYcWsVe5-i"
      },
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "num_epochs = 10  # 원하는 epoch 수로 조정 가능\n",
        "train_losses, val_losses = [], []\n",
        "train_accuracies, val_accuracies = [], []\n",
        "\n",
        "for epoch in range(num_epochs):\n",
        "    # 학습\n",
        "    model.train()\n",
        "    running_loss = 0.0\n",
        "    correct = 0\n",
        "    total = 0\n",
        "\n",
        "    for images, labels in train_loader:\n",
        "        images, labels = images.to(device), labels.to(device)\n",
        "\n",
        "        optimizer.zero_grad()\n",
        "        outputs = model(images)\n",
        "        loss = criterion(outputs, labels)\n",
        "        loss.backward()\n",
        "        optimizer.step()\n",
        "\n",
        "        running_loss += loss.item() * images.size(0)\n",
        "        _, predicted = torch.max(outputs.data, 1)\n",
        "        total += labels.size(0)\n",
        "        correct += (predicted == labels).sum().item()\n",
        "\n",
        "    epoch_loss = running_loss / len(train_loader.dataset)\n",
        "    epoch_acc = correct / total\n",
        "    train_losses.append(epoch_loss)\n",
        "    train_accuracies.append(epoch_acc)\n",
        "\n",
        "    # 검증\n",
        "    model.eval()\n",
        "    val_loss = 0.0\n",
        "    val_correct = 0\n",
        "    val_total = 0\n",
        "\n",
        "    with torch.no_grad():\n",
        "        for images, labels in val_loader:\n",
        "            images, labels = images.to(device), labels.to(device)\n",
        "            outputs = model(images)\n",
        "            loss = criterion(outputs, labels)\n",
        "\n",
        "            val_loss += loss.item() * images.size(0)\n",
        "            _, predicted = torch.max(outputs.data, 1)\n",
        "            val_total += labels.size(0)\n",
        "            val_correct += (predicted == labels).sum().item()\n",
        "\n",
        "    val_epoch_loss = val_loss / len(val_loader.dataset)\n",
        "    val_epoch_acc = val_correct / val_total\n",
        "    val_losses.append(val_epoch_loss)\n",
        "    val_accuracies.append(val_epoch_acc)\n",
        "\n",
        "    print(f\"Epoch [{epoch+1}/{num_epochs}]\")\n",
        "    print(f\"Train Loss: {epoch_loss:.4f}, Accuracy: {epoch_acc:.4f}\")\n",
        "    print(f\"Val Loss: {val_epoch_loss:.4f}, Accuracy: {val_epoch_acc:.4f}\")\n",
        "    print(\"-\" * 40)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KokSjTY2wmXW",
        "outputId": "e986a639-f252-410c-85e8-33f26f2e6f9b"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch [1/10]\n",
            "Train Loss: 1.3675, Accuracy: 0.5486\n",
            "Val Loss: 1.0277, Accuracy: 0.6725\n",
            "----------------------------------------\n",
            "Epoch [2/10]\n",
            "Train Loss: 0.9653, Accuracy: 0.6853\n",
            "Val Loss: 0.9001, Accuracy: 0.7085\n",
            "----------------------------------------\n",
            "Epoch [3/10]\n",
            "Train Loss: 0.8008, Accuracy: 0.7382\n",
            "Val Loss: 0.8647, Accuracy: 0.7288\n",
            "----------------------------------------\n",
            "Epoch [4/10]\n",
            "Train Loss: 0.6820, Accuracy: 0.7756\n",
            "Val Loss: 0.7487, Accuracy: 0.7723\n",
            "----------------------------------------\n",
            "Epoch [5/10]\n",
            "Train Loss: 0.5670, Accuracy: 0.8082\n",
            "Val Loss: 0.7346, Accuracy: 0.7784\n",
            "----------------------------------------\n",
            "Epoch [6/10]\n",
            "Train Loss: 0.4588, Accuracy: 0.8455\n",
            "Val Loss: 0.7789, Accuracy: 0.7791\n",
            "----------------------------------------\n",
            "Epoch [7/10]\n",
            "Train Loss: 0.3905, Accuracy: 0.8664\n",
            "Val Loss: 0.7742, Accuracy: 0.7823\n",
            "----------------------------------------\n",
            "Epoch [8/10]\n",
            "Train Loss: 0.3166, Accuracy: 0.8885\n",
            "Val Loss: 0.8580, Accuracy: 0.7816\n",
            "----------------------------------------\n",
            "Epoch [9/10]\n",
            "Train Loss: 0.2764, Accuracy: 0.9085\n",
            "Val Loss: 0.8208, Accuracy: 0.7887\n",
            "----------------------------------------\n",
            "Epoch [10/10]\n",
            "Train Loss: 0.2362, Accuracy: 0.9166\n",
            "Val Loss: 0.8704, Accuracy: 0.7926\n",
            "----------------------------------------\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from torch.utils.data import random_split\n",
        "\n",
        "# 전체 데이터셋 길이 계산\n",
        "total_size = len(dataset)\n",
        "train_size = int(0.7 * total_size)\n",
        "val_size = int(0.2 * total_size)\n",
        "test_size = total_size - train_size - val_size\n",
        "\n",
        "# 데이터셋 분할\n",
        "train_dataset, val_dataset, test_dataset = random_split(dataset, [train_size, val_size, test_size])"
      ],
      "metadata": {
        "id": "pmqhAbRsTSL8"
      },
      "execution_count": 29,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from torch.utils.data import DataLoader\n",
        "\n",
        "test_loader = DataLoader(test_dataset, batch_size=batch_size, shuffle=False)"
      ],
      "metadata": {
        "id": "SK--fIYOTUOe"
      },
      "execution_count": 30,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class_names = dataset.classes"
      ],
      "metadata": {
        "id": "gYd0EG3sTnP5"
      },
      "execution_count": 32,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import classification_report, confusion_matrix\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "# 모델을 평가 모드로 전환\n",
        "model.eval()\n",
        "y_true = []\n",
        "y_pred = []\n",
        "\n",
        "with torch.no_grad():\n",
        "    for images, labels in test_loader:\n",
        "        images, labels = images.to(device), labels.to(device)\n",
        "        outputs = model(images)\n",
        "        _, predicted = torch.max(outputs, 1)\n",
        "        y_true.extend(labels.cpu().numpy())\n",
        "        y_pred.extend(predicted.cpu().numpy())\n",
        "\n",
        "# 정확도 및 분류 보고서 출력\n",
        "print(\"Classification Report:\\n\")\n",
        "print(classification_report(y_true, y_pred, target_names=class_names))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1zZ0Bq1DTrMe",
        "outputId": "f36383fd-b0ba-459f-99e4-3429be1fe82b"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Classification Report:\n",
            "\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "     battery       0.94      0.93      0.93        80\n",
            "  biological       0.94      0.99      0.96        96\n",
            " brown-glass       0.91      0.91      0.91        65\n",
            "   cardboard       0.99      0.96      0.98        85\n",
            "     clothes       1.00      1.00      1.00       538\n",
            " green-glass       0.99      0.93      0.96        72\n",
            "       metal       0.91      0.88      0.90        83\n",
            "       paper       0.98      0.95      0.97       107\n",
            "     plastic       0.94      0.87      0.91        71\n",
            "       shoes       0.93      0.97      0.95       214\n",
            "       trash       0.87      0.91      0.89        58\n",
            " white-glass       0.88      0.90      0.89        84\n",
            "\n",
            "    accuracy                           0.96      1553\n",
            "   macro avg       0.94      0.93      0.94      1553\n",
            "weighted avg       0.96      0.96      0.96      1553\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 혼동 행렬 계산\n",
        "cm = confusion_matrix(y_true, y_pred)\n",
        "plt.figure(figsize=(8,6))\n",
        "sns.heatmap(cm, annot=True, fmt='d', xticklabels=class_names, yticklabels=class_names, cmap='Blues')\n",
        "plt.xlabel('Predicted Label')\n",
        "plt.ylabel('True Label')\n",
        "plt.title('Confusion Matrix')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 634
        },
        "id": "ugav78joUD0M",
        "outputId": "e009f1e1-3433-4db8-e5e7-6e4990d20ede"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}